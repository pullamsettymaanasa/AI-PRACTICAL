def ucs(graph, start, goal):
    queue = [(0, start)]  # Queue stores (cost, node)
    visited = []  # List to track visited nodes
    
    while queue:
        queue.sort()  # Sort by cost (lowest first)
        cost, node = queue.pop(0)  # Get node with the lowest cost
        
        if node == goal:
            print(f"Goal {goal} found with cost {cost}")
            return
        
        if node not in visited:
            visited.append(node)  # Mark node as visited
            print(f"Visited {node} with cost {cost}")
            for neighbor, edge_cost in graph[node]:
                if neighbor not in visited:
                    queue.append((cost + edge_cost, neighbor))
    
    print(f"Goal {goal} not found")

# Example graph (node -> [(neighbor, cost)])
graph = {
    1: [(2, 1), (3, 4)],
    2: [(1, 1), (4, 2), (5, 5)],
    3: [(1, 4), (6, 1)],
    4: [(2, 2)],
    5: [(2, 5)],
    6: [(3, 1)]
}

ucs(graph, 1, 5)  # Start at node 1 and look for goal node 5
